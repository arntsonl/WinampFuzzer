// WinampConsoleFuzzer.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"

#include <time.h>
#include <Windows.h>
#include <psapi.h> // For access to GetModuleFileNameEx

static bool _quit = 0;
static HWND _winampHwnd = NULL;
static HWND _openPlaylist = NULL;

//#define FUZZY_PLS_ASCII 1
#define FUZZY_B4S_ASCII 1

BOOL CALLBACK enumWindowsProc(HWND hwnd, LPARAM lParam)
{
	// Get the Window handle
	TCHAR className[MAX_PATH];
	GetClassName(hwnd, className, MAX_PATH);
	if (wcscmp(className, L"Winamp v1.x") == 0)
	{
		// Found winamp window
		_winampHwnd = hwnd;
	}

	return TRUE;
}

BOOL CALLBACK findOpenPlaylist(HWND hwnd, LPARAM lParam)
{
	TCHAR windowName[MAX_PATH];
	GetWindowText(hwnd, windowName, MAX_PATH);
	if (wcsstr(windowName, L"Open file(s)") != NULL)
	{
		_openPlaylist = hwnd;
	}

	return TRUE;
}

#ifdef FUZZY_PLS_ASCII
#define FUZZY_FILENAME L"\\fuzzme.pls"
void createPlsFuzzyFile()
{
	static const char alphanum[] =
		"0123456789"
		"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
		"abcdefghijklmnopqrstuvwxyz"
		"!@#$%^&*()_+,.:\\/";

	// Number of entries
	int numberOfEntries = 1;

	// File URL
	int randLen = 0;
	for (int i = 0; i < 0x7FFFFFFF / RAND_MAX; i += RAND_MAX)
		randLen += rand();
	
	char * fileName = new char[randLen+1+8];
	strcpy(fileName, "http://");
	for (int i = 7; i < randLen; i++)
	{
		fileName[i] = alphanum[rand() % (sizeof(alphanum) - 1)];
	}
	fileName[randLen] = 0;

	// Title
	int randLen2 = 0;
	for (int i = 0; i < 0x7FFFFFFF / RAND_MAX; i += RAND_MAX)
		randLen2 += rand();

	char * titleName = new char[randLen2+1];
	for (int i = 0; i < randLen2; i++)
	{
		titleName[i] = alphanum[rand() % (sizeof(alphanum) - 1)];
	}
	titleName[randLen2] = 0;

	// Length
	int length = rand() % 0xFFFFFFF;
	char lengthStr[128];
	itoa(length, lengthStr, 10);

	// Version
	int version = rand() % 0xFFFFFFF;
	char versionStr[128];
	itoa(version, versionStr, 10);

	// Delete the file if it exists
	DeleteFile(L"fuzzme.pls");
	Sleep(50);

	// Create a file to fuzz
	HANDLE hFile = CreateFile(L"fuzzme.pls", GENERIC_WRITE, 0, NULL, CREATE_NEW, FILE_ATTRIBUTE_NORMAL, NULL);
	char * buf = new char[randLen + randLen2 + 16 + 16 + 100];
	strcpy(buf, "[playlist]\r\n"
		"numberofentries = 1\r\n"
		"File1 = ");
	strcat(buf, fileName);
	strcat(buf, "\r\n"
		"Title1 = ");
	strcat(buf, titleName);
	strcat(buf, "\r\n"
		"Length1 = ");
	strcat(buf, lengthStr);
	strcat(buf, "\r\n"
		"Version = ");
	strcat(buf, versionStr);
	strcat(buf, "\r\n");
	DWORD written;
	WriteFile(hFile, buf, strlen(buf), &written, NULL);
	CloseHandle(hFile);

	delete buf;
	delete titleName;
	delete fileName;
}
#endif

#ifdef FUZZY_B4S_ASCII
#define FUZZY_FILENAME L"\\fuzzme.b4s"
void createB4sFuzzyFile()
{
	static const char alphanum[] =
		"0123456789"
		"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
		"abcdefghijklmnopqrstuvwxyz";
		//"!@#$%^&*()_+,.:\\/";

	// Number of entries
	int numberOfEntries = 1;

	// Label
	int randLen = 0;
	for (int i = 0; i < 0x7FFFFFFF / RAND_MAX; i += RAND_MAX)
		randLen += rand();
	char * labelName = new char[randLen + 1];
	for (int i = 0; i < randLen; i++)
	{
		labelName[i] = alphanum[rand() % (sizeof(alphanum) - 1)];//rand() % 0xFE + 1; //alphanum[rand() % (sizeof(alphanum) - 1)];
	}
	labelName[randLen] = 0;

	// File URL
	int randLen2 = 0;
	for (int i = 0; i < 0x7FFFFFFF / RAND_MAX; i += RAND_MAX)
		randLen2 += rand();
	char * fileName = new char[randLen2 + 1 + 8];
	strcpy(fileName, "file:");
	for (int i = 5; i < randLen2; i++)
	{
		fileName[i] = alphanum[rand() % (sizeof(alphanum) - 1)];
	}
	fileName[randLen2] = 0;

	// Title
	int randLen3 = 0;
	for (int i = 0; i < 0x7FFFFFFF / RAND_MAX; i += RAND_MAX)
		randLen3 += rand();
	char * titleName = new char[randLen3 + 1];
	for (int i = 0; i < randLen3; i++)
	{
		titleName[i] = alphanum[rand() % (sizeof(alphanum) - 1)]; //alphanum[rand() % (sizeof(alphanum) - 1)];
	}
	titleName[randLen3] = 0;

	// Length
	int length = rand() % 0xFFFFFFF;
	char lengthStr[128];
	itoa(length, lengthStr, 10);

	// Delete the file if it exists
	DeleteFile(L"fuzzme.b4s");
	Sleep(50);

	// Create a file to fuzz
	HANDLE hFile = CreateFile(L"fuzzme.b4s", GENERIC_WRITE, 0, NULL, CREATE_NEW, FILE_ATTRIBUTE_NORMAL, NULL);

	unsigned int randDepth = 0;
	for (int i = 0; i < 0xFFFFFFFF / RAND_MAX; i += RAND_MAX)
		randDepth += rand();

	char * buf = new char[4000000]; // huge buffer
	strcpy(buf, "<?xml version=\"1.0\" encoding='UTF-8' standalone=\"yes\"?>\r\n"
		"<WinampXML>\r\n"
		"<!-- ");
	strcat(buf, "Generated by: Nullsoft Winamp3 version 3.0c");
	strcat(buf, " -->\r\n"
		"<playlist num_entries = \"1\" label=\"");
	strcat(buf, titleName);
	strcat(buf, "\">\r\n"
		"<entry Playstring=\"");
	strcat(buf, "file:E:\\fuzz\\fuzzmeharder.mp3");
	strcat(buf, "\">\r\n"
		"<Name>\r\n");
	strcat(buf, "Fuzz Me");
	strcat(buf, "\r\n</Name>\r\n");
	for (int i = 0; i < 0x2FFFF; i++)
	{
		strcat(buf, "<A>\r\n");
	}
	for (int i = 0; i < 0x2FFFF; i++)
	{
		strcat(buf, "</A>\r\n");
	}
	strcat(buf, "<Length>");
	strcat(buf, lengthStr);
	strcat(buf, "</Length>\r\n"
		"</entry>\r\n"
		"</playlist>\r\n"
		"</WinampXML>");
	DWORD written;

	WriteFile(hFile, buf, strlen(buf), &written, NULL);

	CloseHandle(hFile);


	delete buf;
	delete titleName;
	delete fileName;
	delete labelName;

}
#endif

int _tmain(int argc, _TCHAR* argv[])
{
	srand((unsigned)time(NULL));

	// Open Winamp.exe
	PROCESS_INFORMATION processInformation = { 0 };
	STARTUPINFO startupInfo = { 0 };
	startupInfo.cb = sizeof(startupInfo);
	TCHAR szNativeProgramFilesFolder[MAX_PATH];
	ExpandEnvironmentStrings(L"%PROGRAMFILES(x86)%",
		szNativeProgramFilesFolder,
		ARRAYSIZE(szNativeProgramFilesFolder));
	TCHAR winampPath[MAX_PATH];
	lstrcpyW(winampPath, szNativeProgramFilesFolder);
	lstrcatW(winampPath, L"\\Winamp\\winamp.exe");
	BOOL result = CreateProcess(NULL, winampPath, NULL, NULL, FALSE, NORMAL_PRIORITY_CLASS, NULL, NULL, &startupInfo, &processInformation);
	if (!result)
	{
		printf("Could not start Winamp.exe, check your system\n");
		return -1;
	}

	// wait for Winamp.exe to open
	Sleep(1000);

	// Find Winamp.exe process ID
	EnumWindows(enumWindowsProc, 0);

	while (_quit == 0)
	{
		// Check to see if we crashed? need to fix this maybe
		if (IsWindow(_winampHwnd) == FALSE)
		{
			_quit = 1;
			break;
		}

		if (_winampHwnd == NULL)
			Sleep(1000); // go to sleep
		else
		{
			// Then open winamp, do some business
			SetForegroundWindow(_winampHwnd);
			Sleep(50);

			// Now send some key commands
			INPUT * key = new INPUT;
			key->type = INPUT_KEYBOARD;
			key->ki.wVk = 'L';
			key->ki.dwFlags = 0;
			key->ki.time = 0;
			key->ki.wScan = 0;
			key->ki.dwExtraInfo = 0;
			SendInput(1, key, sizeof(INPUT));
			Sleep(50);
			key->ki.wVk = 'L';
			key->ki.dwFlags = KEYEVENTF_KEYUP;
			key->ki.time = 0;
			key->ki.wScan = 0;
			key->ki.dwExtraInfo = KEYEVENTF_KEYUP;
			SendInput(1, key, sizeof(INPUT));

			// now get the dialog window
			Sleep(100);
			EnumWindows(findOpenPlaylist, 0);

			// If we crash, I'd expect this to sleep forever, so we can observe the crash
			while (_openPlaylist == NULL)
				Sleep(50);

			// Create a fuzzy file
#ifdef FUZZY_PLS_ASCII
			createPlsFuzzyFile();
#endif
#ifdef FUZZY_B4S_ASCII
			createB4sFuzzyFile();
#endif
#ifdef FUZZY_B4S_UNICODE
			createB4sUniFuzzyFile();
#endif
			// Now, send some text to the dialog box
			HWND comboBox32 = FindWindowEx(_openPlaylist, NULL, L"ComboBoxEx32", NULL);
			HWND comboBox = FindWindowEx(comboBox32, NULL, L"ComboBox", NULL);
			HWND edit = FindWindowEx(comboBox, NULL, L"Edit", NULL);
			TCHAR filePath[MAX_PATH];
			GetCurrentDirectory(MAX_PATH, filePath);
			wcscat(filePath, FUZZY_FILENAME);
			SendMessage(edit, WM_SETTEXT, NULL, (LPARAM)filePath);

			// Press Enter (button isn't working)
			key->ki.wVk = 0x0D;
			key->ki.dwFlags = 0;
			key->ki.time = 0;
			key->ki.wScan = 0;
			key->ki.dwExtraInfo = 0;
			SendInput(1, key, sizeof(INPUT));
			Sleep(50);
			key->ki.wVk = 0x0D;
			key->ki.dwFlags = KEYEVENTF_KEYUP;
			key->ki.time = 0;
			key->ki.wScan = 0;
			key->ki.dwExtraInfo = KEYEVENTF_KEYUP;
			SendInput(1, key, sizeof(INPUT));
		}
	}

	return 0;
}

